[pytest]
# Pytest configuration for Docker Tools

# Test discovery
testpaths = tests
python_files = test_*.py
python_classes = Test*
python_functions = test_*

# Output options
addopts = 
    --strict-markers
    --tb=short
    --disable-warnings
    -p no:cacheprovider
    --asyncio-mode=auto

# Coverage options (when running with --cov)
# These are used when running: pytest --cov
[coverage:run]
source = .
omit = 
    */tests/*
    */test_*
    */__pycache__/*
    */venv/*
    */.venv/*
    */env/*
    setup.py
    conftest.py

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    raise AssertionError
    raise NotImplementedError
    if __name__ == .__main__.:
    if TYPE_CHECKING:
    @(abc\.)?abstractmethod

# Test markers
markers =
    slow: marks tests as slow running
    integration: marks tests as integration tests requiring external resources
    unit: marks tests as unit tests
    asyncio: marks tests as requiring asyncio
    gui: marks tests that require GUI components
    docker: marks tests that require Docker to be installed
    git: marks tests that require Git to be installed

# Asyncio configuration
asyncio_mode = auto

# Timeout for tests (in seconds)
timeout = 300
timeout_method = thread

# Logging
log_cli = false
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)s] %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

# Warnings
filterwarnings =
    error
    ignore::UserWarning
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
